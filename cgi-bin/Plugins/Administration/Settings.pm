###################################################################
#  GT-Chat 0.95 Alpha Plugin                                       #
#  Written for release 20021225                                   #
#  Author: Wladimir Palant                                        #
#                                                                 #
#  This plugin manages the file Settings.dat.                     #
###################################################################

package GT_Chat::Plugins::Administration::Settings::095_02;
use strict;

return bless({
	action_handlers => {
		'admin_images' => \&images_handler,
		'admin_smileys' => \&smileys_handler,
		'admin_maintenance' => \&maintenance_handler,
		'admin_defaults' => \&defaults_handler,
		'admin_general_settings' => \&settings_handler,
		'admin_commandpermissions' => \&commandpermissions_handler,
		'admin_permissions' => \&permissions_handler,
		'admin_command_aliases' => \&command_aliases_handler,
		'admin_color_aliases' => \&color_aliases_handler,
	},
	template_var_handlers => {
		'admin_aliases' => \&aliases_loader,
		'admin_colors' => \&aliases_loader,
	},
});

sub saveArray
{
	my ($file, $array, $level) = @_;
	
	$level = 1 unless $level;
	
	print $file "[\n";
	foreach my $element (@$array)
	{
		print $file "\t"x$level;
		
		if (ref($element) eq 'HASH')
		{
			saveHash($file, $element, $level+1);
		}
		elsif (ref($element) eq 'ARRAY')
		{
			saveArray($file, $element, $level+1);
		}
		else
		{
			my $str = "$element";
			if ($str !~ /^(?:-?[1-9]\d*|0|-0(?=\.))(?:\.\d*[1-9])?$/)
			{
				$str =~ s/(['\\])/\\$1/g;
				$str = "'$str'";
			}
			print $file $str;
		}
		
		print $file ",\n";
	}
	print $file "\t"x($level-1) . "]";
}

sub saveHash
{
	my ($file, $hash, $level) = @_;
	
	$level = 1 unless $level;
	
	print $file "{\n";
	foreach my $key (sort keys %$hash)
	{
		my $str = $key;
		if ($str =~ /\W/ || $str eq '')
		{
			$str =~ s/(['\\])/\\$1/g;
			$str = "'$str'";
		}
		
		print $file "\t"x$level . $str . ' => ';
		
		if (ref($hash->{$key}) eq 'HASH')
		{
			saveHash($file, $hash->{$key}, $level+1);
		}
		elsif (ref($hash->{$key}) eq 'ARRAY')
		{
			saveArray($file, $hash->{$key}, $level+1);
		}
		else
		{
			$str = "$hash->{$key}";
			if ($str !~ /^(?:-?[1-9]\d*|0|-0(?=\.))(?:\.\d*[1-9])?$/)
			{
				$str =~ s/(['\\])/\\$1/g;
				$str = "'$str'";
			}
			print $file $str;
		}
		
		print $file ",\n";
	}
	print $file "\t"x($level-1) . "}";
}

sub saveSettings
{
	my ($main, $settings) = @_;
	
	$main->open(local* FILE, '>'.$main->translateName('Settings.dat'));
	print FILE <<"EOT";
##########################################################
#  This is an autogenerated file. Do not change anything #
#  unless you know exactly what you do. Use the Admin    #
#  functions menu instead.                               #
##########################################################
	 
return 
EOT

	saveHash(*FILE, $settings);

	print FILE ";";
	
	$main->close(*FILE);
}

sub images_handler
{
	my($self,$main) = @_;
	
	$main->{template_vars}{backaddr} = 'javascript:top.setTimeout(\'writeMenu()\',0)';
	$main->fatal_error('nopermission') unless $main->hasPermission('admin_images');

	my %images = ();
	opendir(local *DIR,$main->translateName('imagesdir::')) || $main->fatal_error('couldnotopendir',{dir => $main->translateName('imagesdir::')});
	foreach my $file (readdir(DIR))
	{
		if ($file =~ s/\.gif$// && $file ne 'blank')
		{
			my ($width,$height);
			
			$main->open(local* FILE, $main->translateName("imagesdir::$file.gif"));
			read FILE, my($temp), 6;
			if ($temp =~ /^GIF8[79]a$/)
			{
				read FILE, $temp, 4;
				($width, $height) = unpack('v2',$temp);
			}
			$main->close(*FILE);
			
			if ($width && $height)
			{
				$images{$file} = [$width, $height];
			}
		}
	}
	closedir(DIR);
	
	my $settings = $main->{modules}{'Settings.dat'};
	$settings->{images} = \%images;

	$main->saveSettings($settings);
	
	$main->printTemplate('admin/images');
}

sub smileys_handler
{
	my($self,$main) = @_;
	
	$main->{template_vars}{backaddr} = 'javascript:top.setTimeout(\'writeMenu()\',0)';
	$main->fatal_error('nopermission') unless $main->hasPermission('admin_smileys');

	my @smileys = ();
	for (my $i=0;int($main->{input}{"smiley$i"});$i++)
	{
		my @smiley = ();
		for (my $j=0;$j<int($main->{input}{"smiley$i"});$j++)
		{
			push @smiley, $main->{input}{"smiley$i\_$j"};
		}
		push @smileys,\@smiley;
	}
	
	my $settings = $main->{modules}{'Settings.dat'};
	$settings->{smileys} = \@smileys;

	$main->saveSettings($settings);
	
	$main->printTemplate('admin/menu_back');
}

sub maintenance_handler
{
	my($self,$main) = @_;
	
	$main->{template_vars}{backaddr} = 'javascript:top.setTimeout(\'writeMenu()\',0)';
	$main->fatal_error('nopermission') unless $main->hasPermission('admin_maintenance');

	my $maintenance = ($main->{input}{maintenance} ? 1 : 0);
	my $current = ($main->{settings}{maintenance} ? 1 : 0);

	if ($maintenance != $current)
	{
		my $settings = $main->{modules}{'Settings.dat'};
		$settings->{maintenance} = $maintenance;
	
		$main->saveSettings($settings);
		
		if ($maintenance)
		{
			my $users = $main->getOnlineUsers;
			foreach my $user (@$users)
			{
				$main->loadUser($user->{name}, $user);
				$main->kickUser($user, {error_name => 'error_maintenance_activated'}) unless $main->hasPermission('ignore_maintenance', $user);
			}
		}
	}

	$main->printTemplate('admin/menu_back');
}

sub defaults_handler
{
	my($self,$main) = @_;
	
	$main->{template_vars}{backaddr} = 'javascript:top.setTimeout(\'writeMenu()\',0)';
	$main->fatal_error('nopermission') unless $main->hasPermission('admin_defaults');

	my $settings = $main->{modules}{'Settings.dat'};
	my $changed = 0;
	foreach my $key (keys %{$main->{input}})
	{
		if ($main->{input}{$key} =~ /\S/ && $key =~ /^default\.(.*)/ && $settings->{default}{$1} ne $main->{input}{$key})
		{
			$settings->{default}{$1} = $main->{input}{$key};
			$changed = 1;
		}
	}
	
	$main->saveSettings($settings) if $changed;
		
	$main->printTemplate('admin/menu_back');
}

sub settings_handler
{
	my($self,$main) = @_;
	
	$main->{template_vars}{backaddr} = 'javascript:top.setTimeout(\'writeMenu()\',0)';
	$main->fatal_error('nopermission') unless $main->hasPermission('admin_general_settings');

	my $settings = $main->{modules}{'Settings.dat'};
	my $changed = 0;
	foreach my $key (keys %{$main->{input}})
	{
		if ($main->{input}{$key} =~ /\S/ && $key =~ /^settings\.(.*)/ && !ref($settings->{$1}) && $settings->{$1} ne $main->{input}{$key})
		{
			$settings->{$1} = $main->{input}{$key};
			$changed = 1;
		}
	}
	
	$main->saveSettings($settings) if $changed;
		
	$main->printTemplate('admin/menu_back');
}

sub permissions_handler
{
	my ($self,$main) = @_;

	$main->{template_vars}{backaddr} = 'javascript:top.setTimeout(\'writeMenu()\',0)';
	$main->fatal_error('nopermission') unless $main->hasPermission('admin_permissions');

	my $settings = $main->{modules}{'Settings.dat'};
	my $changed = 0;
	foreach my $key (keys %{$main->{input}})
	{
		if ($key =~ /^permission\.(.*)/)
		{
			my $permission = $1;
			my $oldvalue = $settings->{permissions}{$permission};
			$oldvalue = 256 unless defined($oldvalue);
			if ($permission !~ /\./ && $oldvalue != $main->{input}{$key})
			{
				if ($main->{input}{$key} < 256)
				{
					$settings->{permissions}{$permission} = int($main->{input}{$key});
				}
				else
				{
					delete $settings->{permissions}{$permission};
				}
				$changed = 1;
			}
		}
	}
	
	$main->saveSettings($settings) if $changed;
		
	$main->printTemplate('admin/menu_back');
}

sub commandpermissions_handler
{
	my ($self,$main) = @_;

	$main->{template_vars}{backaddr} = 'javascript:top.setTimeout(\'writeMenu()\',0)';
	$main->fatal_error('nopermission') unless $main->hasPermission('admin_commandpermissions');

	my $settings = $main->{modules}{'Settings.dat'};
	my $changed = 0;
	foreach my $key (keys %{$main->{input}})
	{
		if ($key =~ /^permission\.(command\..*)/)
		{
			my $permission = $1;
			my $oldvalue = $settings->{permissions}{$permission};
			$oldvalue = -1 unless defined($oldvalue);
			if ($oldvalue != $main->{input}{$key})
			{
				if ($main->{input}{$key} > -1)
				{
					$settings->{permissions}{$permission} = int($main->{input}{$key});
				}
				else
				{
					delete $settings->{permissions}{$permission};
				}
				$changed = 1;
			}
		}
	}
	
	$main->saveSettings($settings) if $changed;
		
	$main->printTemplate('admin/menu_back');
}

sub aliases_handler
{
	my ($main,$key) = @_;

	my $settings = $main->{modules}{'Settings.dat'};
	
	my %languages = map {$_ => 1} @{$main->{settings}{languages}};
	$settings->{$key} = {};
	$settings->{language_dependent}{$_}{$key} = {} foreach keys %languages;
	
	for (my $i=0;exists($main->{input}{"alias$i"});$i++)
	{
		my $language = $main->{input}{"language$i"};
		if ($languages{$language})
		{
			$settings->{language_dependent}{$language}{$key}{$main->{input}{"alias$i"}} = $main->{input}{"command$i"};
		}
		else
		{
			$settings->{$key}{$main->{input}{"alias$i"}} = $main->{input}{"command$i"};
		}
	}
	
	$main->saveSettings($settings);
	
	$main->printTemplate('admin/menu_back');
}

sub command_aliases_handler
{
	my ($self,$main) = @_;

	$main->{template_vars}{backaddr} = 'javascript:top.setTimeout(\'writeMenu()\',0)';
	$main->fatal_error('nopermission') unless $main->hasPermission('admin_command_aliases');
	
	aliases_handler($main, 'aliases');
}

sub color_aliases_handler
{
	my ($self,$main) = @_;

	$main->{template_vars}{backaddr} = 'javascript:top.setTimeout(\'writeMenu()\',0)';
	$main->fatal_error('nopermission') unless $main->hasPermission('admin_color_aliases');
	
	aliases_handler($main, 'colors');
}

sub aliases_loader
{
	my($self,$main,$var) = @_;

	$main->{template_vars}{backaddr} = 'javascript:top.setTimeout(\'writeMenu()\',0)';
	$main->fatal_error('nopermission') unless $main->hasPermission($var =~ /color/ ? 'admin_color_aliases' : 'admin_command_aliases');

	my $key = ($var =~ /color/ ? 'colors' : 'aliases');
	my %ret = ();
	my $settings = $main->{modules}{'Settings.dat'};
	foreach my $language ('',@{$main->{settings}{languages}})
	{
		my $base;
		if ($language eq '')
		{
			$base = $settings->{$key};
		}
		else
		{
			$base = $settings->{language_dependent}{$language}{$key};
		}
		
		foreach my $alias (keys %$base)
		{
			$ret{$alias} = {command => $base->{$alias}, languages => []} unless exists($ret{$alias});
			
			push @{$ret{$alias}->{languages}},$language;
		}
	}
	$main->{template_vars}{$var} = \%ret;
}
